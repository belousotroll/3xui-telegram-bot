# handlers.py
import io
import qrcode
from logger import api_logger as logger
from api_client import get_connection_string
from telebot import types
from bot import bot

from handlers import *


@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message) -> None:
    user_id = message.chat.id
    username = message.from_user.username or "[unknown]"

    logger.info(f"Received /start from user_id={user_id}, username={username}")

    # –ï—Å–ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω
    if is_approved_user(user_id):
        bot.send_message(
            user_id,
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=make_user_keyboard(),
        )
        return

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç
    requests = load_approval_requests()
    if any(entry["user_id"] == user_id for entry in requests):
        bot.send_message(
            user_id,
            "‚åõ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è",
        )
        return

    # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
    requests.append({"user_id": user_id, "username": username})
    save_approval_requests(requests)
    logger.info(f"Saved request for user with id={user_id}")

    admins = load_admins()
    for admin in admins:
        admin_id = admin["user_id"]
        try:
            bot.send_message(
                admin_id,
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username} with id={user_id})",
                reply_markup=make_approve_management_keyboard(user_id),
            )
        except Exception as e:
            logger.error(f"Failed to notify admin with id={admin_id}: {e}")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {admins}")

    bot.send_message(
        user_id, "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
    )


@bot.callback_query_handler(func=lambda call: call.data == "get_qr")
def cmd_send_qr(call: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —Å–µ—Ä–≤–µ—Ä—É"""
    user_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_approved_user(user_id):
        bot.answer_callback_query(
            call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞", show_alert=True
        )
        logger.warning(f"User {user_id} tried to get QR without approval")
        return

    logger.info(f"Incoming command /get_qr from approved user_id={user_id}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    cs = get_connection_string(user_id)
    if cs is None:
        bot.send_message(user_id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        bot.answer_callback_query(call.id)
        logger.error(f"Can't find configuration for user with id={user_id}")
        return

    logger.info(f'Connection string for user with id={user_id} is "{cs}"')

    # –î–µ–ª–∞–µ–º –∏–∑ –Ω–µ–µ QR
    img = qrcode.make(cs)
    buf = io.BytesIO()
    buf.name = "qrcode.png"
    img.save(buf, "PNG")
    buf.seek(0)

    bot.send_photo(user_id, photo=buf)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "get_info")
def cmd_send_info(call: types.CallbackQuery) -> None:
    user_id = call.message.chat.id

    if not is_approved_user(user_id):
        bot.answer_callback_query(
            call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞", show_alert=True
        )
        logger.warning(f"User {user_id} tried to get info without approval")
        return

    logger.info(f"Incoming command /get_info from approved user with id={user_id}")
    bot.send_message(user_id, "‚ÑπÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == 'buy_subscription')
def handle_subscription_payment(callback_query):
    chat_id = callback_query.message.chat.id

    bot.send_invoice(
        chat_id=chat_id,
        title="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        payload="buy_subscription",
        provider_token="",
        currency="RUB",
        prices=[types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=100*100)],
        start_parameter="subscription",
        is_flexible=False
    )

@bot.message_handler(func=lambda message: True)
def fallback(message: types.Message) -> None:
    bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é")
